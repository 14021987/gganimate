% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/gg_animate.R
\name{gg_animate}
\alias{gg_animate}
\title{Show an animation of a ggplot2 object}
\usage{
gg_animate(p = last_plot(), filename = NULL, saver = NULL, pause = NULL,
  title_frame = TRUE, ...)
}
\arguments{
\item{p}{A ggplot2 object. If no plot is provided, use the last plot by default.}

\item{filename}{Output file. If not given, simply prints to the screen (typical for animated
knitr chunks)}

\item{saver}{Can specify a function (or a string such as "mp4" or "html") that specifies
a function to use for saving. Functions from the animation package such as \code{saveVideo}
and \code{saveGIF} are also recognized from the filename extension.}

\item{pause}{Amount of time to pause between displaying each plot. Only used when
displaying to the screen, not saving to a file (and not useful when creating an
animation in a knitr chunk). When saving to a file, use
\code{ani.options(interval = ...)}}

\item{title_frame}{Whether to title each image with the current \code{frame} value.
The value is appended on to any existing title.}

\item{...}{If saving to a file, extra arguments to pass along to the animation
saving function (to \code{saveVideo}/\code{saveGIF}/etc).}
}
\description{
Show an animation of a ggplot2 object that contains a \code{frame} aesthetic. This
\code{frame} aesthetic will determine which frame the animation is shown in. For
example, you could add the aesthetic \code{frame = time} to a dataset including
a \code{time} variable. Each distinct value of the frame aesthetic is rendered
into one frame of the resulting animation, in sorted order.
}
\details{
If \code{cumulative = TRUE} is set within a layer along with a \code{frame} aesthetic,
the frames build cumulatively rather than each being generated with separate data.
}
\examples{
library(ggplot2)
library(gapminder)

p <- ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, color = continent, frame = year)) +
  geom_point() +
  scale_x_log10()

p

gg_animate(p, pause = .5)

\dontrun{
gg_animate(p, "output.gif")
gg_animate(p, "output.mp4")
}

# You can also create cumulative graphs by adding the `cumulative = TRUE` aesthetic.
# For example, we could show the progression of temperature over time.

aq <- airquality
aq$date <- as.Date(paste(1973, aq$Month, aq$Day, sep = "-"))

p2 <- ggplot(aq, aes(date, Temp, frame = Month, cumulative = TRUE)) +
  geom_line()

gg_animate(p2, pause = .5, title_frame = FALSE)
}

